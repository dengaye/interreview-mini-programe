// 本文件中的json内容将在云函数【运行】时作为参数传给云函数。
// 配置教程参考：https://uniapp.dcloud.net.cn/uniCloud/rundebug.html#runparam
{
    "result": {
        "affectedDocs": 1,
        "code": 0,
        "data": [
            {
                "_id": "61aa38400d111e00010371ac",
                "category": "QA",
                "desc": null,
                "exerciseKey": "0735b620-52b9-441a-9298-7dc2b54d2ef0",
                "explanation": "![](https://static.vue-js.com/2ae9dda0-85fa-11eb-ab90-d9ae814b240d.png)\n\n\n\n## 一、是什么\n\n函数缓存，就是将函数运算过的结果进行缓存\n\n本质上就是用空间（缓存存储）换时间（计算过程）\n\n常用于缓存数据计算结果和缓存对象\n\n```js\nconst add = (a,b) => a+b;\nconst calc = memoize(add); // 函数缓存\ncalc(10,20);// 30\ncalc(10,20);// 30 缓存\n```\n\n缓存只是一个临时的数据存储，它保存数据，以便将来对该数据的请求能够更快地得到处理\n\n\n\n## 二、如何实现\n\n实现函数缓存主要依靠闭包、柯里化、高阶函数，这里再简单复习下：\n\n### 闭包\n\n闭包可以理解成，函数 + 函数体内可访问的变量总和\n\n```js\n(function() {\n    var a = 1;\n    function add() {\n        const b = 2\n        let sum = b + a\n        console.log(sum); // 3\n    }\n    add()\n})()\n```\n\n`add `函数本身，以及其内部可访问的变量，即 `a = 1 `，这两个组合在⼀起就形成了闭包\n\n\n\n### 柯里化\n\n把接受多个参数的函数转换成接受一个单一参数的函数\n\n```js\n// 非函数柯里化\nvar add = function (x,y) {\n    return x+y;\n}\nadd(3,4) //7\n\n// 函数柯里化\nvar add2 = function (x) {\n    //**返回函数**\n    return function (y) {\n        return x+y;\n    }\n}\nadd2(3)(4) //7\n```\n\n将一个二元函数拆分成两个一元函数\n\n\n\n### 高阶函数\n\n通过接收其他函数作为参数或返回其他函数的函数\n\n```js\nfunction foo(){\n  var a = 2;\n\n  function bar() {\n    console.log(a);\n  }\n  return bar;\n}\nvar baz = foo();\nbaz();//2\n```\n\n函数 `foo` 如何返回另一个函数 `bar`，`baz` 现在持有对 `foo` 中定义的`bar` 函数的引用。由于闭包特性，`a`的值能够得到\n\n\n\n下面再看看如何实现函数缓存，实现原理也很简单，把参数和对应的结果数据存在一个对象中，调用时判断参数对应的数据是否存在，存在就返回对应的结果数据，否则就返回计算结果\n\n如下所示\n\n```js\nconst memoize = function (func, content) {\n  let cache = Object.create(null)\n  content = content || this\n  return (...key) => {\n    if (!cache[key]) {\n      cache[key] = func.apply(content, key)\n    }\n    return cache[key]\n  }\n}\n```\n\n调用方式也很简单\n\n```js\nconst calc = memoize(add);\nconst num1 = calc(100,200)\nconst num2 = calc(100,200) // 缓存得到的结果\n```\n\n过程分析：\n\n- 在当前函数作用域定义了一个空对象，用于缓存运行结果\n- 运用柯里化返回一个函数，返回的函数由于闭包特性，可以访问到`cache`\n- 然后判断输入参数是不是在`cache`的中。如果已经存在，直接返回`cache`的内容，如果没有存在，使用函数`func`对输入参数求值，然后把结果存储在`cache`中\n\n\n\n## 三、应用场景\n\n虽然使用缓存效率是非常高的，但并不是所有场景都适用，因此千万不要极端的将所有函数都添加缓存\n\n以下几种情况下，适合使用缓存：\n\n- 对于昂贵的函数调用，执行复杂计算的函数\n- 对于具有有限且高度重复输入范围的函数\n- 对于具有重复输入值的递归函数\n- 对于纯函数，即每次使用特定输入调用时返回相同输出的函数\n\n",
                "level": 2,
                "options": null,
                "renderType": "md",
                "tagId": 10,
                "title": "Javascript中如何实现函数缓存？函数缓存有哪些应用场景？"
            }
        ],
        "errCode": 0,
        "errMsg": "",
        "message": "",
        "systemInfo": [
        ],
        "timeCost": 555
    },
		"action": "list"
}
